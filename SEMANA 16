import tkinter as tk
from tkinter import messagebox

class TaskManager:
    def __init__(self, root):
      self.root = root
  self.root.title("Gestión de Tareas")
      self.root.geometry("400x400")

      self.entry = tk.Entry(root, width=40)
   self.entry.pack(pady=10)
      self.entry.focus()

     # Botones
   btn_frame = tk.Frame(root)
   btn_frame.pack(pady=5)

self.add_btn = tk.Button(btn_frame, text="Añadir", command=self.add_task)
   self.add_btn.grid(row=0, column=0, padx=5)

      self.complete_btn = tk.Button(btn_frame, text="Completar", command=self.complete_task)
    self.complete_btn.grid(row=0, column=1, padx=5)

    self.delete_btn = tk.Button(btn_frame, text="Eliminar", command=self.delete_task)
        self.delete_btn.grid(row=0, column=2, padx=5)

        # Lista de tareas
     self.listbox = tk.Listbox(root, width=50, height=15, selectmode=tk.SINGLE)
        self.listbox.pack(pady=10)

        # Atajos
  self.root.bind("<Return>", lambda event: self.add_task())       # Enter para añadir
       self.root.bind("<c>", lambda event: self.complete_task())       # "C" para completar
   self.root.bind("<d>", lambda event: self.delete_task())         # "D" para eliminar
       self.root.bind("<Delete>", lambda event: self.delete_task())    # Supr para eliminar
     self.root.bind("<Escape>", lambda event: self.root.quit())      # Esc para salir

    def add_task(self):
        task = self.entry.get().strip()
        if task:
        self.listbox.insert(tk.END, task)
            self.entry.delete(0, tk.END)
        else:
            messagebox.showwarning("Advertencia", "No puedes añadir una tarea vacía.")

    def complete_task(self):
        selected = self.listbox.curselection()
        if selected:
            index = selected[0]
         task = self.listbox.get(index)
            if not task.startswith("✔ "):
                self.listbox.delete(index)
            self.listbox.insert(index, "✔ " + task)  # Marca visual de completada
        else:
      messagebox.showinfo("Info", "Selecciona una tarea para marcar como completada.")

    def delete_task(self):
        selected = self.listbox.curselection()
        if selected:
            self.listbox.delete(selected[0])
        else:
            messagebox.showinfo("Info", "Selecciona una tarea para eliminar.")

# Activar
if __name__ == "__main__":
    root = tk.Tk()
    app = TaskManager(root)
    root.mainloop()
