import tkinter as tk
from tkinter import ttk, messagebox
from tkcalendar import DateEntry

class AgendaApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Agenda Personal")
        self.root.geometry("700x400")
        
        # Frame principal para lista de eventos
        frame_lista = ttk.Frame(root, padding=10)
        frame_lista.pack(fill=tk.BOTH, expand=True)

        # TreeView para mostrar eventos
        columnas = ("fecha", "hora", "descripcion")
        self.tree = ttk.Treeview(frame_lista, columns=columnas, show="headings")
        self.tree.heading("fecha", text="Fecha")
        self.tree.heading("hora", text="Hora")
        self.tree.heading("descripcion", text="Descripción")
        self.tree.pack(fill=tk.BOTH, expand=True)

        # Frame para entradas
        frame_inputs = ttk.Frame(root, padding=10)
        frame_inputs.pack(fill=tk.X)

        # Campo fecha con DatePicker
        ttk.Label(frame_inputs, text="Fecha:").grid(row=0, column=0, padx=5, pady=5)
        self.entry_fecha = DateEntry(frame_inputs, width=12, background='darkblue', foreground='white', borderwidth=2)
        self.entry_fecha.grid(row=0, column=1, padx=5, pady=5)

        # Campo hora
        ttk.Label(frame_inputs, text="Hora (HH:MM):").grid(row=0, column=2, padx=5, pady=5)
        self.entry_hora = ttk.Entry(frame_inputs)
        self.entry_hora.grid(row=0, column=3, padx=5, pady=5)

        # Campo descripción
        ttk.Label(frame_inputs, text="Descripción:").grid(row=0, column=4, padx=5, pady=5)
        self.entry_descripcion = ttk.Entry(frame_inputs, width=30)
        self.entry_descripcion.grid(row=0, column=5, padx=5, pady=5)

        # Frame para botones 
        frame_botones = ttk.Frame(root, padding=10)
        frame_botones.pack(fill=tk.X)

        btn_agregar = ttk.Button(frame_botones, text="Agregar Evento", command=self.agregar_evento)
        btn_agregar.pack(side=tk.LEFT, padx=5)

        btn_eliminar = ttk.Button(frame_botones, text="Eliminar Seleccionado", command=self.eliminar_evento)
        btn_eliminar.pack(side=tk.LEFT, padx=5)

        btn_salir = ttk.Button(frame_botones, text="Salir", command=root.quit)
        btn_salir.pack(side=tk.RIGHT, padx=5)

    def agregar_evento(self):
        fecha = self.entry_fecha.get()
        hora = self.entry_hora.get().strip()
        descripcion = self.entry_descripcion.get().strip()

        if not fecha or not hora or not descripcion:
            messagebox.showwarning("Campos vacíos", "Debe llenar todos los campos.")
            return

        self.tree.insert("", tk.END, values=(fecha, hora, descripcion))
        self.entry_hora.delete(0, tk.END)
        self.entry_descripcion.delete(0, tk.END)

    def eliminar_evento(self):
        seleccionado = self.tree.selection()
        if not seleccionado:
            messagebox.showwarning("Sin selección", "Debe seleccionar un evento para eliminar.")
            return

        confirmar = messagebox.askyesno("Confirmar eliminación", "¿Desea eliminar el evento seleccionado?")
        if confirmar:
            for item in seleccionado:
                self.tree.delete(item)

if __name__ == "__main__":
    root = tk.Tk()
    app = AgendaApp(root)
    root.mainloop()
