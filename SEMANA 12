class Libro:
    def __init__(self, titulo, autor, categoria, isbn):
        # Tupla inmutable con titulo y autor
        self.info = (titulo, autor)
        self.categoria = categoria
        self.isbn = isbn

    def __str__(self):
        return f"{self.info[0]} de {self.info[1]} (Categoría: {self.categoria}, ISBN: {self.isbn})"


class Usuario:
    def __init__(self, nombre, user_id):
        self.nombre = nombre
        self.user_id = user_id
        self.prestados = []  # lista de libros prestados

    def __str__(self):
        return f"Usuario: {self.nombre}, ID: {self.user_id}, Libros prestados: {len(self.prestados)}"


class Biblioteca:
    def __init__(self):
        self.libros = {}        # {isbn: Libro}
        self.usuarios = {}      # {id: Usuario}
        self.user_ids = set()   # conjunto para IDs únicos

    # Gestión de libros 
    def añadir_libro(self, libro):
        if libro.isbn in self.libros:
            print("El libro ya está en la biblioteca.")
        else:
            self.libros[libro.isbn] = libro
            print(f"Libro añadido: {libro}")

    def quitar_libro(self, isbn):
        if isbn in self.libros:
            eliminado = self.libros.pop(isbn)
            print(f"Libro eliminado: {eliminado}")
        else:
            print("No se encontró el libro.")

    # Gestión de usuarios
    def registrar_usuario(self, usuario):
        if usuario.user_id in self.user_ids:
            print("Ese ID ya está registrado.")
        else:
            self.usuarios[usuario.user_id] = usuario
            self.user_ids.add(usuario.user_id)
            print(f"Usuario registrado: {usuario.nombre}")

    def dar_baja_usuario(self, user_id):
        if user_id in self.usuarios:
            usuario = self.usuarios.pop(user_id)
            self.user_ids.remove(user_id)
            print(f"Usuario dado de baja: {usuario.nombre}")
        else:
            print("Usuario no encontrado.")

    # Préstamos
    def prestar_libro(self, user_id, isbn):
        if user_id not in self.usuarios:
            print("Usuario no registrado.")
            return
        if isbn not in self.libros:
            print("Libro no disponible.")
            return

        usuario = self.usuarios[user_id]
        libro = self.libros.pop(isbn)  # se quita de los disponibles
        usuario.prestados.append(libro)
        print(f"{usuario.nombre} ha prestado el libro: {libro.info[0]}")

    def devolver_libro(self, user_id, isbn):
        if user_id not in self.usuarios:
            print("Usuario no registrado.")
            return

        usuario = self.usuarios[user_id]
        for libro in usuario.prestados:
            if libro.isbn == isbn:
                usuario.prestados.remove(libro)
                self.libros[isbn] = libro  # vuelve a la biblioteca
                print(f"{usuario.nombre} devolvió el libro: {libro.info[0]}")
                return
        print("Ese libro no estaba prestado por el usuario.")

    # Búsqueda 
    def buscar_libro(self, titulo=None, autor=None, categoria=None):
        resultados = []
        for libro in self.libros.values():
            if ((titulo and titulo.lower() in libro.info[0].lower()) or
                (autor and autor.lower() in libro.info[1].lower()) or
                (categoria and categoria.lower() in libro.categoria.lower())):
                resultados.append(libro)

        if resultados:
            print("Resultados de la búsqueda:")
            for l in resultados:
                print(" -", l)
        else:
            print("No se encontraron libros.")

    # Listar préstamos
    def listar_prestados(self, user_id):
        if user_id not in self.usuarios:
            print("Usuario no encontrado.")
            return
        usuario = self.usuarios[user_id]
        if usuario.prestados:
            print(f"Libros prestados a {usuario.nombre}:")
            for l in usuario.prestados:
                print(" -", l)
        else:
            print(f"{usuario.nombre} no tiene libros prestados.")
